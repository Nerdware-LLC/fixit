#!/usr/bin/env bash
###############################################################################
readonly script_name='Fixit OpenAPI Types Codegen'

# Script constants:
readonly open_api_schema='schemas/OpenAPI/open-api.yaml'
readonly types_output='src/types/__codegen__/open-api.ts'

readonly script_help="
SCRIPT:	$script_name

	This script creates TypeScript types from the Fixit OpenAPI schema.

	Schema Input:  $open_api_schema
	Types Output:  $types_output

USAGE:  scripts/codegen.open-api-types.sh [OPTIONS]

OPTIONS:
	-h, --help   	Display this help message.
	-s, --silent	Disable script stdout log output (default: false).
"
###############################################################################
# PARSE SCRIPT ARGS/OPTIONS

# If a 'help' flag was provided, log the help message and exit
[[ "${*}" =~ (-h|help) ]] && echo "$script_help" && exit 0

readonly silent="$([[ "${*}" =~ (-s|--silent) ]] && echo true || echo false)"

###############################################################################
# UTIL FUNCTIONS

# log_info: print args to stdout unless the --silent flag was provided
function log_info() {
	# ANSI codes: \e[96m is light-cyan text, \e[0m is reset
	[ "$silent" != 'true' ] && printf '\e[96m%b\e[0m\n' "${@}"
}

# throw_error: log error-message args and exit (regardless of --silent flag)
function throw_error() {
	# ANSI codes: \e[31m is red text, \e[0m is reset
	printf '\e[31m%b\e[0m\n' "ðŸš¨ ERROR: $1" "${@:2}" '(EXIT 1)'
	exit 1
}

###############################################################################
# SCRIPT ACTION FUNCTIONS

function ensure_npx_cmd_is_present() {
	if ! type npx 1>/dev/null; then
		# Try invoking `nvm` to make it available
		type nvm 1>/dev/null && nvm use 1>/dev/null
		# If `npx` is still not available, throw an error
		! type npx && throw_error 'Unable to fetch the GraphQL schema â€” npx command not found.'
	fi
}

function validate_openapi_schema() {
	log_info 'Validating the OpenAPI schema ...'

	npx swagger-cli validate "$open_api_schema" ||
		throw_error 'OpenAPI Schema validation failed.'
}

# TODO rm this part AFTER the version-field-updating stuff in semantic-release is known to work
function update_openapi_schema_version() {
	log_info 'Ensuring the OpenAPI schema "version" is up-to-date ...'

	# Ensure the package.json is present
	[ ! -f package.json ] &&
		throw_error 'Unable to update the OpenAPI schema "version" â€” package.json not found.'

	# Get "version" from package.json and open-api.yaml
	local project_version schema_version
	project_version="$(jq --raw-output '.version' ./package.json)"
	schema_version="$(grep -oPm1 '(?<=version:\s")[a-zA-Z0-9.-]+(?=")' "$open_api_schema")"

	log_info \
		"    Schema version:  $schema_version" \
		"    Project version: $project_version"

	# If the schema version is the same as the project version, no need to update
	if [ "$schema_version" == "$project_version" ]; then
		log_info '    OpenAPI schema version is up-to-date.'
		return
	else
		log_info "Updating OpenAPI schema version to \"$project_version\" ..."
	fi

	# Set the schema version to the project version
	if sed -i.BACKUP_OF_SCHEMA_FILE_BEFORE_SED.yaml \
		"0,/version:\s/{s/version:.*/version: \"$project_version\"/}" \
		"$open_api_schema"; then
		# On success, remove the backup file and log the update
		rm "$open_api_schema.BACKUP_OF_SCHEMA_FILE_BEFORE_SED.yaml"
		log_info 'OpenAPI schema version updated successfully! ðŸš€'
	else
		throw_error 'Failed to update the OpenAPI schema version.'
	fi
}

function generate_openapi_ts_types() {
	log_info 'Generating OpenAPI TypeScript types ...'

	# Update OpenAPI types using NodeJS API from openapi-typescript to fix `Date` types.
	# (Their CLI does not convert `format: date-time` values to `Date` types)

	node --input-type=module -e "
	import fs from 'node:fs';
	import ts from 'typescript';
	import openapiTS, { astToString } from 'openapi-typescript';

	const DATE = ts.factory.createIdentifier('Date');
	const NULL = ts.factory.createLiteralTypeNode(ts.factory.createNull());

	const ast = await openapiTS(
		new URL('file://$PWD/$open_api_schema'),
		{
			transform(schemaObject, metadata) {
				if (schemaObject.format === 'date-time') {
					return Array.isArray(schemaObject.type) && schemaObject.type.includes('null')
						? ts.factory.createUnionTypeNode([DATE, NULL])
						: DATE;
				}
			},
		}
	);

	const tsFileContents = \`\
	/**
	 * This file was auto-generated by openapi-typescript.
	 * Do not make direct changes to the file.
	 */

	\${astToString(ast)}
	\`;

	fs.writeFileSync('$types_output', tsFileContents);"

	# Log the result of the OpenAPI codegen operation
	if [ $? != 0 ]; then
		throw_error 'Failed to generate OpenAPI TypeScript types.'
	else
		log_info 'OpenAPI TypeScript types generated successfully! ðŸš€'
	fi
}

###############################################################################
# SCRIPT EXECUTION

log_info "[Script] $script_name"

ensure_npx_cmd_is_present
validate_openapi_schema
update_openapi_schema_version
generate_openapi_ts_types

###############################################################################
