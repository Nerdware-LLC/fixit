import { defineConfig } from "@eddeee888/gcg-typescript-resolver-files";
import { isValidPhone } from "@nerdware/ts-string-helpers";
import { CONTACT_SK_REGEX_PATTERN_STR } from "../../dynamodb-models/src/Contact/regex.js";
import { INVOICE_SK_REGEX_PATTERN_STR } from "../../dynamodb-models/src/Invoice/regex.js";
import { USER_ID_REGEX_PATTERN_STR } from "../../dynamodb-models/src/User/regex.js";
import { WO_SK_REGEX_PATTERN_STR } from "../../dynamodb-models/src/WorkOrder/regex.js";
import { HANDLE_REGEX_PATTERN_STR } from "../../dynamodb-models/src/_common/regex.js";
import type { CodegenConfig } from "@graphql-codegen/cli";
import type { TypeScriptPluginConfig } from "@graphql-codegen/typescript";
import type { ValidationSchemaPluginConfig } from "graphql-codegen-typescript-validation-schema";

// LIB PATHS:
const LIB_GQL = "libs/api-schemas/GraphQL";

// typescript plugin configs used by all output targets:
const SHARED_TS_PLUGIN_CONFIGS: TypeScriptPluginConfig = {
  enumsAsTypes: true,
  useTypeImports: true,
  strictScalars: true, // throw on unknown/invalid scalar types
  namingConvention: "change-case#pascalCase",
  maybeValue: "T | null",
  defaultScalarType: "unknown", // default: `any`
  // Don't put "scalars" here, the preset requires "scalarsOverrides" instead.
};

/**
 * ## `@graphql-codegen` Configs
 *
 * This file is used by the `@graphql-codegen/cli` package to generate the following:
 *
 * - TypeScript types for GQL Schema typeDefs and resolvers.
 * - Zod validation schemas for GQL input types.
 */
const codegenConfig: CodegenConfig = {
  schema: `${LIB_GQL}/schema/**/*.graphql`,
  generates: {
    [`${LIB_GQL}/schema`]: defineConfig({
      // Files generated by the preset:
      resolverTypesPath: "../src/types/__generated__.graphqlSchemaTypes.ts",
      typeDefsFilePath: "../src/__generated__.graphqlSchemaTypeDefs.ts",
      mergeSchema: "./__generated__.schema.graphqls",
      // Other preset configs:
      tsConfigFilePath: `${LIB_GQL}/tsconfig.json`,
      emitLegacyCommonJSImports: false, //   The preset doesn't read this from the outer/parent configs.
      resolverGeneration: "disabled", //     Don't generate resolver implementations.
      fixObjectTypeResolvers: "disabled", // Don't diff GQL-types with their mapped types.
      scalarsModule: false, //               Don't use scalars from the `graphql-scalars` package.
      scalarsOverrides: {
        ID: { type: "string" },
        DateTime: { type: "Date" },
      },
      typesPluginsConfig: {
        // PLUGIN CONFIGS — typescript:
        ...SHARED_TS_PLUGIN_CONFIGS,
        // PLUGIN CONFIGS — typescript-resolvers:
        contextType: "@fixit/apollo-graphql/types#ApolloServerContext", // Resolver context type
        useIndexSignature: true, // Add an index signature to generated resolvers
        // prettier-ignore
        mappers: {
          Contact: "@fixit/dynamodb-models/Contact#ContactItem",
          Invoice: "@fixit/dynamodb-models/Invoice#InvoiceItem",
          PublicUserFields: "@fixit/api-schemas/GraphQL/types/PublicUserFieldsCodegenMapper.js#PublicUserFieldsCodegenMapper",
          UserSubscription: "@fixit/dynamodb-models/UserSubscription#UserSubscriptionItem",
          UserStripeConnectAccount: "@fixit/dynamodb-models/UserStripeConnectAccount#UserStripeConnectAccountItem",
          WorkOrder: "@fixit/dynamodb-models/WorkOrder#WorkOrderItem",
        },
      },
    }),

    // ZOD VALIDATION SCHEMA
    [`${LIB_GQL}/src/__generated__.zodSchemas.ts`]: {
      plugins: ["typescript-validation-schema"],
      config: {
        emitLegacyCommonJSImports: false,
        // PLUGIN CONFIGS — typescript:
        ...SHARED_TS_PLUGIN_CONFIGS,
        scalars: {
          ID: "string",
          DateTime: "Date",
        },
        // PLUGIN CONFIGS — typescript-validation-schema:
        schema: "zod",
        importFrom: "@fixit/api-schemas/GraphQL/types",
        validationSchemaExportType: "const",
        notAllowEmptyString: true,
        withObjectType: true,
        scalarSchemas: {
          ID: "z.string().min(1)",
          DateTime: "z.date()",
        },
        directives: {
          constraint: {
            // STRING CONSTRAINTS:
            minLength: "min",
            maxLength: "max",
            startsWith: "startsWith",
            endsWith: "endsWith",
            contains: "includes",
            notContains: "refine((value) => !value.includes($1), { message: $2 })",
            pattern: "regex(/$1/, { message: $2 })",
            format: {
              // format, MISC FORMATS:
              email: "email",
              handle: ["regex", `/^${HANDLE_REGEX_PATTERN_STR}$/`, "Invalid user handle"],
              phone: ["regex", `/${isValidPhone._regex.source}/`, "Invalid phone number"],
              url: "url",
              uuid: "uuid",
              // format, ID-BASED FORMATS:
              contactID: ["regex", `/^${CONTACT_SK_REGEX_PATTERN_STR}$/`, "Invalid Contact ID"],
              invoiceID: ["regex", `/^${INVOICE_SK_REGEX_PATTERN_STR}$/`, "Invalid Invoice ID"],
              userID: ["regex", `/^${USER_ID_REGEX_PATTERN_STR}$/`, "Invalid User ID"],
              workOrderID: ["regex", `/^${WO_SK_REGEX_PATTERN_STR}$/`, "Invalid WorkOrder ID"],
            },
            // NUMERIC CONSTRAINTS:
            min: "min", // alias of zod.number().gte()
            max: "max", // alias of zod.number().lte()
          },
        },
      } satisfies TypeScriptPluginConfig & ValidationSchemaPluginConfig,
    },
  },
};

export default codegenConfig;
