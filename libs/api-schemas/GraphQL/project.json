{
  "name": "GraphQL-schema",
  "projectType": "library",
  "tags": ["api", "schema", "graphql"],
  "targets": {
    "lint": {
      "executor": "nx:run-commands",
      "dependsOn": ["typecheck"],
      "cache": true,
      "inputs": ["default", "{workspaceRoot}/eslint.config.js"],
      "options": {
        "commands": [
          // Lint the GraphQL schema:
          "rover graph lint fixit@current --schema libs/api-schemas/GraphQL/schema/__generated__.schema.graphqls",
          // Lint TS/JS:
          "eslint libs/api-schemas/GraphQL/"
        ]
      }
    },
    "typecheck": {
      "executor": "nx:run-commands",
      "options": {
        /* For some reason, setting "cwd":"libs/api-schemas/GraphQL" doesn't work here
        like it does in the other nx projects' typecheck targets â€” tsc says the tsconfig
        file can't be found, even though debugging shows it's right where it's expected.
        So instead the cmd is re-written to work from the monorepo root. */
        "command": "npx tsc --project libs/api-schemas/GraphQL/tsconfig.json --noEmit --skipLibCheck"
      }
    },
    "build": {
      "dependsOn": ["lint"],
      "executor": "nx:run-commands",
      "cache": true,
      "inputs": ["default"],
      "options": {
        "commands": [
          "graphql-codegen-esm --config libs/api-schemas/GraphQL/codegen.ts",
          /* A @ts-nocheck comment must be added to the top of the codegen'd zod-schemas
          file because the relevant codegen plugin currently creates output in which some
          vars are used before they're declared, which causes `typecheck` to fail unless
          the codegen'd output is manually fixed each time. */
          "sed -i '1i// @ts-nocheck' libs/api-schemas/GraphQL/src/validation/__generated__.zodSchemas.ts"
        ],
        "parallel": false,
        "color": true
      }
    }
  }
}
