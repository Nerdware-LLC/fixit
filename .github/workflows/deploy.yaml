name: Deploy Workflow

on:
  release:
    types: [published]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_OIDC_GITHUB_ROLE_ARN }}
          aws-region: ${{ secrets.ECR_REPO_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Build, Tag, and Push Image to Amazon ECR
        id: push-to-ecr
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_PRIVATE_REPO }}
        run: |
          IMAGE_TAGS=(
            "${{ github.sha }}"
            "${{ github.event.release.tag_name }}"
          )

          if [ "${{ github.event.release.prerelease }}" == 'true' ]; then
            IMAGE_TAGS+=( staging next )
          else
            IMAGE_TAGS+=( prod latest )
          fi

          IMAGE_REPO="$ECR_REGISTRY/$ECR_REPOSITORY"
          IMAGE_TAGS=("${IMAGE_TAGS[@]/#/$IMAGE_REPO:}")

          docker build ${IMAGE_TAGS[@]/#/--tag } .

          for tag in "${IMAGE_TAGS[@]}"; do docker push "$tag"; done

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECS_OIDC_GITHUB_ROLE_ARN }}
          aws-region: ${{ secrets.ECS_CLUSTER_REGION }}

      - name: Update ECS Task Definition & Service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_PRIVATE_REPO }}
        run: |
          IMAGE_REPO="$ECR_REGISTRY/$ECR_REPOSITORY"
          IMAGE_SHA_TAG="$IMAGE_REPO:${{ github.sha }}"

          if [ "${{ github.event.release.prerelease }}" == 'true' ]; then
            TASK_DEF_NAME="${{ secrets.ECS_API_TASK_DEF_STAGING }}"
            SERVICE_NAME="${{ secrets.ECS_API_SERVICE_NAME_STAGING }}"
            CLUSTER_NAME="${{ secrets.ECS_CLUSTER_NAME_STAGING }}"
          else
            TASK_DEF_NAME="${{ secrets.ECS_API_TASK_DEF_PROD }}"
            SERVICE_NAME="${{ secrets.ECS_API_SERVICE_NAME_PROD }}"
            CLUSTER_NAME="${{ secrets.ECS_CLUSTER_NAME_PROD }}"
          fi

          TASK_DEF_JSON=$( \
            aws ecs describe-task-definition \
              --task-definition "$TASK_DEF_NAME" \
              --output json
          )

          UPDATED_TASK_DEF_JSON=$( \
            echo $TASK_DEF_JSON | \
            jq --arg NEW_IMAGE "$IMAGE_SHA_TAG" \
              '.taskDefinition |
              .containerDefinitions[0].image = $NEW_IMAGE |
              del(.taskDefinitionArn) |
              del(.revision) |
              del(.status) |
              del(.requiresAttributes) |
              del(.compatibilities) |
              del(.registeredAt) |
              del(.registeredBy)'
          )

          aws ecs register-task-definition \
            --cli-input-json "$UPDATED_TASK_DEF_JSON"

          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_DEF_NAME \
            --force-new-deployment
