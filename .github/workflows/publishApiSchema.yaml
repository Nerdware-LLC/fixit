name: Publish API Schema

on:
  release:
    types: [released] # Includes both releases and pre-releases

jobs:
  publish-open-api-schema:
    name: Publish OpenAPI Schema
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - run: npm ci --include=dev

      - env:
          SWAGGERHUB_API_KEY: ${{ secrets.SWAGGERHUB_API_KEY }}
        run: |
          schema_file='schemas/OpenAPI/open-api.yaml'
          tmp_bundle='schemas/OpenAPI/tmp-open-api-bundle.yaml'

          # Ensure the OpenAPI schema is valid
          if ! npx swagger-cli validate $schema_file; then
              echo "ðŸš¨ ERROR: Failed to publish OpenAPI schema â€” schema is invalid"
              exit 1
          fi

          # Create a tmp bundled schema file for SwaggerHub
          npx swagger-cli bundle $schema_file --outfile $tmp_bundle --type yaml

          # Array for SwaggerHub CLI flags that are based on the release type:
          swaggerhub_cli_release_flags=()

          # For full releases, publish the schema and set it as the new default version
          if [ ${{ github.event.release.prerelease }} == 'false' ]; then
              swaggerhub_cli_release_flags+=(
                  --published=publish
                  --setdefault
              )
          fi

          # Create a new schema version
          npx swaggerhub api:create \
              Nerdware/Fixit/${{ github.event.release.tag_name }} \
              --file=$tmp_bundle \
              --visibility=public \
              ${swaggerhub_cli_release_flags[@]}

          # Cleanup - remove the tmp file
          rm $tmp_bundle

  publish-graphql-schema:
    name: Publish GraphQL Schema
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - run: npm ci --include=dev

      - env:
          APOLLO_KEY: ${{ secrets.APOLLO_STUDIO_GRAPH_API_KEY }}
        run: |
          # IF prerelease is false, THEN variant=prod, ELSE variant=staging
          graph_variant="$(
              [ ${{ github.event.release.prerelease }} == 'false' ] &&
                  echo prod ||
                  echo staging
          )"

          scripts/cicd.publish-gql-schema.sh --variant=$graph_variant
